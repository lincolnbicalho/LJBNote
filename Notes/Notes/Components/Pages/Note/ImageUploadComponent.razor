@using Radzen
@inject ILogger<ImageUploadComponent> Logger
@inject IImageNoteService OCRService


<div class="form-group row m-1 mb-3 mt-3">
    @if (_progress > 0 && _progress < 100)
    {
        <div class="rz-m-12">
            <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="_progress" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    }
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Left" Class="rz-p-1" Gap="1rem">
            <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text=@filesProcess />
            <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text=@filesProcessed />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Left" Class="rz-p-1" Gap="1rem">
            <RadzenUpload @ref="upload" Auto="false" Multiple="true" Url=@url Change=@(args => OnChange(args, "Manual Upload")) InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                          Progress=@(args => OnProgress(args, "Manual Upload")) class="w-100" />
            @if (showUploadButton)
            {
                <RadzenButton Text="Upload" Click=@(args => upload.Upload()) class="mt-4" />
                <RadzenButton Click=@(args => ReadAndOCRImages()) class="mt-4" Text="Read Images" ButtonStyle="ButtonStyle.Info" />
            }
        </RadzenStack>
        
    </RadzenCard>

</div>
@code {
    private string? filesProcess;
    private string? filesProcessed;
    private int _progress = 0;
    private bool showUploadButton = false;
    private RadzenUpload upload;
    private string url = "api/upload/multiple/";

    [Parameter]
    public EventCallback<NoteModel> OnProcessedImages { get; set; }
    [Parameter]
    public NoteModel? Note { get; set; }

    protected override void OnParametersSet()
    {
        url = url + Note.Id;

        int numberOfFIlesToProcess = OCRService.NumberOfImagestoProcess(Note.Id);
        filesProcess = $"Files to process {numberOfFIlesToProcess}";
        filesProcessed = $"Files to processed {OCRService.NumberOfImagesProcessed(Note.Id)}";
        if (numberOfFIlesToProcess > 0)
            showUploadButton = true;
    }


    string fileName = "FileName";
    string test = "Test Name";
    long? fileSize;

    void OnChange(UploadChangeEventArgs args, string name)
    {
        showUploadButton = true;
        Logger.LogInformation($"{name} value changed");
    }

    void OnError(UploadErrorEventArgs args, string name)
    {
        Logger.LogInformation($"{args.Message}");
    }


    private void OnProgress(UploadProgressArgs args, string name)
    {
        Logger.LogInformation($"% '{name}' / {args.Loaded} of {args.Total} bytes.");
        Logger.LogInformation($"progress = {args.Progress}");
        _progress = args.Progress;
    }

    private async void ReadAndOCRImages()
    {
        _progress = 99;
        string ocrText = string.Empty;
        var listOCRImages = await OCRService.ReadImages(Note.Id);
        foreach (var item in listOCRImages)
        {
            ocrText += item.OCRText;
        }
        Note.Text += ocrText;
        _progress = 0;
        filesProcess = $"Files to process {OCRService.NumberOfImagestoProcess(Note.Id)}";
        filesProcessed = $"Files to processed {OCRService.NumberOfImagesProcessed(Note.Id)}";
        await OnProcessedImages.InvokeAsync(Note);
    }
}

