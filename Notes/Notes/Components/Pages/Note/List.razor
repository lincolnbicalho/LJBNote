@page "/Note"
@using Radzen
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject INoteWebService NoteService
@inject ILogger<List> Logger

<PageTitle>Note List</PageTitle>

<h1>Note List</h1>

<p>This is all the Notes</p>

<p class="esh-link-wrapper">
    <a class="icon-link text-decoration-none" href="Note/Create">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
            <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0" />
        </svg>
        New Note
    </a>
</p>

@if (_notes is null)
{
    <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
        <Template>Wait</Template>
    </RadzenProgressBarCircular>
}
else
{
    <div class="row col-md-8 col-sm-12">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Resume</th>
                    <th>Category</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var n in _notes)
                {
                    <tr>
                        <td>@n.Id</td>
                        <td>@n.Title</td>
                        <td>@n.Resume</td>
                        <td>@n.Category.Title</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => EditNote(n)">Edit</button>
                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteNote(n)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    List<NoteModel>? _notes;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Loading all notes");
        _notes = await NoteService.GetAllNotes();
    }

    private void EditNote(NoteModel note)
    {
        Navigation.NavigateTo($"Note/Edit/{note.Id}");
    }

    private async void DeleteNote(NoteModel note)
    {
        Logger.LogInformation("Deleting Note Id: {id}", note.Id);
        bool result = await NoteService.DeleteById(note.Id);
        if (result)
            _notes.Remove(note);
        await InvokeAsync(StateHasChanged);
    }
}
